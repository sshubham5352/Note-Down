package com.example.notedown.modules.tasks

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.core.view.isVisible
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.example.notedown.data.Task
import com.example.notedown.databinding.ItemTaskBinding

class TasksAdapter(private val listener: OnTaskItemClickListener) :
    ListAdapter<Task, TasksAdapter.TasksViewHolder>(DiffCallback()) {


    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TasksViewHolder {
        val binding = ItemTaskBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return TasksViewHolder(binding)
    }

    override fun onBindViewHolder(holder: TasksViewHolder, position: Int) {
        val currentItem = getItem(position)
        holder.bind(currentItem)
    }

    inner class TasksViewHolder(private val binding: ItemTaskBinding) :
        RecyclerView.ViewHolder(binding.root) {

        init {
            binding.apply {
                root.setOnClickListener {
                    val position = adapterPosition
                    if (position != RecyclerView.NO_POSITION)
                        listener.onItemClick(getItem((position)))
                }
                checkboxCompleted.setOnClickListener {
                    val position = adapterPosition
                    if (position != RecyclerView.NO_POSITION)
                        listener.onCheckBoxClick(getItem(position), checkboxCompleted.isChecked)
                }
            }
        }

        fun bind(task: Task) {
            binding.apply {
                titleTask.text = task.title
                modifiedTimestampTask.text = task.modifiedTime
                checkboxCompleted.isChecked = task.isCompleted
                titleTask.paint.isStrikeThruText = task.isCompleted
                labelPriority.isVisible = task.isPriority
            }

        }
    }

    class DiffCallback : DiffUtil.ItemCallback<Task>() {

        /**
         * 2 different task items can't have the same id
         * id for every Task item is generated by Room while creating the task
         */
        override fun areItemsTheSame(oldItem: Task, newItem: Task) = oldItem.id == newItem.id

        /**
         * "==" means "equals" method
         *  and since our Task is a Data Class, equals method is already defined accordingly
         */
        override fun areContentsTheSame(oldItem: Task, newItem: Task) = oldItem == newItem
    }

    interface OnTaskItemClickListener {
        fun onItemClick(task: Task)
        fun onCheckBoxClick(task: Task, isChecked: Boolean)
    }
}
